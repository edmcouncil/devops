#!/usr/bin/env groovy
//
// The main Jenkinsfile for html-pages
//
// Note that this file is in the so called "Declarative Pipeline" syntax
//
// See https://jenkins.io/doc/book/pipeline/jenkinsfile/
//
//
// Jenkins requirements:
//	* "nodejs" plugin + Npm config files with the following id's:
//	  - "home"
//	  - "general"
//	* "pipeline-npm" plugin
//	* nodes with labels:
//	  - "${JOB_NAME.substring(0,JOB_NAME.lastIndexOf('/'))}-build"	:= for building
//	  - "${JOB_NAME.substring(0,JOB_NAME.lastIndexOf('/'))}"	:= for publishing

env.LC_ALL='en_US.UTF-8'
env.LANG='en_US.UTF-8'
env.LANGUAGE='en_US.UTF-8'
env.NGINX_SPEC_ROOT="/opt/html-pages"

env.PUBLIC_URL="0.0.0.0"
env.DISABLE_ESLINT_PLUGIN="true"
env.BASE_URL="https://spec.edmcouncil.org/"

properties([
  buildDiscarder(
          logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30')
  ),
  //
  // We let each stage running on each jenkins slave / agent decide what to check out or not
  //
//  skipDefaultCheckout(),
  //
  // Skip stages once the build status has gone to UNSTABLE.
  //
//  skipStagesAfterUnstable(),
  //
  // There must be SOME limit, if it hangs or whatever then that's a bug and therefore cancel the job.
  //
//  timeout(time: 23, unit: 'HOURS'),
  //
  // Prepend all console output generated by the Pipeline run with the time at which the line was emitted
  //
  //timestamps()
//  ansiColor('xterm')
])

node {
  ansiColor('xterm') {
    stage('Build') {
      node("${JOB_NAME.substring(0,JOB_NAME.lastIndexOf('/'))}-build") {
        // setting variables
        script {
          // Replace all slashes in a branch name with dashes
          // ... and make it all lower case
          BRANCH = sh(returnStdout: true, script: 'if [ -n "${TAG_NAME}" ] ; then echo "${TAG_NAME//\\//-}" | cut -d_ -f 1 ; else echo "${BRANCH_NAME//\\//-}" ; fi').trim().toLowerCase()
          TAG    = sh(returnStdout: true, script: 'if [ -n "${TAG_NAME}" ] ; then echo "${TAG_NAME}" | cut -d_ -f 2 ; else echo "latest" ; fi').trim()
        }
        try {
          echo "Branch is ${env.BRANCH_NAME}..."
          echo "Node is ${JOB_NAME.substring(0,JOB_NAME.lastIndexOf('/'))}-build"
          checkout scm
          dir("home") {
           try {
            withNPM(npmrcConfig:"home") {
              sh "set &>env.log"
              echo "Performing npm ci..."
              sh "npm --no-progress --no-color ci &>html-pages.log"
              echo "Performing npm build..."
              sh "env DISABLE_ESLINT_PLUGIN=true npm --no-progress --no-color run build &>>html-pages.log"
              sh "mv -f env.log html-pages.log ../general/"
            }
           } catch (e) {
             currentBuild.result = "FAILURE"
             echo "Failed the \"${STAGE_NAME}\" stage: ${e}"
             archiveArtifacts artifacts: "env.log, html-pages.log", allowEmptyArchive: true
             throw e
           }
          }
          dir("general") {
           try {
            withNPM(npmrcConfig:"general") {
              sh "set &>>env.log"
              echo "Performing npm ci..."
              sh "npm --no-progress --no-color ci &>>html-pages.log"
              echo "Performing npm run generate for fibo"
              sh "env NODE_ENV=production ONTPUB_FAMILY=fibo RESOURCES_BASE_URL=/fibo/ontology/ STRAPI_URL=http://edmc-fibo-viewer.dc.makolab.pl:1330 STRAPI_RESOURCES_URL=/fibo npm --no-progress --no-color run generate &>>html-pages.log && mv dist/fibo/pages/${BRANCH}/${TAG}/pages/${BRANCH}/${TAG}/_nuxt dist/fibo/pages/${BRANCH}/${TAG}/_nuxt"
              echo "Performing npm run generate for auto"
              sh "env NODE_ENV=production ONTPUB_FAMILY=auto RESOURCES_BASE_URL=/auto/ontology/ STRAPI_URL=http://edmc-fibo-viewer.dc.makolab.pl:1331 STRAPI_RESOURCES_URL=/auto npm --no-progress --no-color run generate &>>html-pages.log && mv dist/auto/pages/${BRANCH}/${TAG}/pages/${BRANCH}/${TAG}/_nuxt dist/auto/pages/${BRANCH}/${TAG}/_nuxt"
              echo "Performing npm run generate for idmp"
              sh "env NODE_ENV=production ONTPUB_FAMILY=idmp BASE_URL=https://spec.pistoiaalliance.org/ RESOURCES_BASE_URL=/idmp/ontology/ STRAPI_URL=http://idmp-onto-viewer.dc.makolab.pl:1332 STRAPI_RESOURCES_URL=/idmp npm --no-progress --no-color run generate &>>html-pages.log && mv dist/idmp/pages/${BRANCH}/${TAG}/pages/${BRANCH}/${TAG}/_nuxt dist/idmp/pages/${BRANCH}/${TAG}/_nuxt"
              echo "Performing npm run generate for esg"
              sh "env NODE_ENV=production ONTPUB_FAMILY=esg RESOURCES_BASE_URL=/esg/ontology/ STRAPI_URL=http://idmp-onto-viewer.dc.makolab.pl:1333 STRAPI_RESOURCES_URL=/esg npm --no-progress --no-color run generate &>>html-pages.log && mv dist/esg/pages/${BRANCH}/${TAG}/pages/${BRANCH}/${TAG}/_nuxt dist/esg/pages/${BRANCH}/${TAG}/_nuxt"
              sh "rm -rf dist/*/pages/${BRANCH}/${TAG}/pages"
            }
            echo 'mv -vf ../home/dist/* dist/'
            sh 'mv -vf ../home/dist/* dist/'
            echo 'Stashing dist/**'
            dir('dist') {
              stash name: "html-pages", includes: "**"
              sh "tar cJpf ../html-pages.tar.xz *"
            }
            archiveArtifacts artifacts: "html-pages.tar.xz, html-pages.log", allowEmptyArchive: true
           } catch (e) {
             currentBuild.result = "FAILURE"
             echo "Failed the \"${STAGE_NAME}\" stage: ${e}"
             archiveArtifacts artifacts: "env.log, html-pages.log", allowEmptyArchive: true
             throw e
           }
          }
        } finally {
          deleteDir()
          dir("${workspace}@tmp") {
            deleteDir()
          }
          // slackScript.notifyStage()
        }
      } // end of node('master')
    } // end of stage "Publish"
    stage('Publish') {
      node("${JOB_NAME.substring(0,JOB_NAME.lastIndexOf('/'))}") {
        // setting variables
        script {
          // Replace all slashes in a branch name with dashes
          // ... and make it all lower case
          BRANCH = sh(returnStdout: true, script: 'if [ -n "${TAG_NAME}" ] ; then echo "${TAG_NAME//\\//-}" | cut -d_ -f 1 ; else echo "${BRANCH_NAME//\\//-}" ; fi').trim().toLowerCase()
          TAG    = sh(returnStdout: true, script: 'if [ -n "${TAG_NAME}" ] ; then echo "${TAG_NAME}" | cut -d_ -f 2 ; else echo "latest" ; fi').trim()
        }
        try {
          echo "remove old in ${sh(returnStdout: true, script: 'hostname -s').trim()}:${NGINX_SPEC_ROOT}/htmlpages/${BRANCH}/${TAG}"
          sh "rm -rf ${NGINX_SPEC_ROOT}/htmlpages/${BRANCH}/${TAG}"
          echo "remove old in ${sh(returnStdout: true, script: 'hostname -s').trim()}:${NGINX_SPEC_ROOT}/*/pages/${BRANCH}/${TAG}"
          sh "rm -rf ${NGINX_SPEC_ROOT}/*/pages/${BRANCH}/${TAG}"
          dir("${NGINX_SPEC_ROOT}") {
            echo "unstash html-pages"
            unstash "html-pages"
          }
        } catch (e) {
          currentBuild.result = "FAILURE"
          echo "Failed the \"${STAGE_NAME}\" stage: ${e}"
          throw e
        } finally {
          deleteDir()
          dir("${workspace}@tmp") {
            deleteDir()
          }
          dir("${workspace}@script") {
            deleteDir()
          }
          // slackScript.notifyStage()
        }
      } // end of node('master')
    } // end of stage "Publish"
  } // end of ansiColor('xterm')
}
